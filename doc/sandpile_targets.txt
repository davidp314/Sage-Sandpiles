
---

.. _all_k_config(k):

**all_k_config(k)**

	The configuration with all values set to k.

	INPUT:

	``k`` - integer

	OUTPUT:

	Divisor

	EXAMPLES::

	    sage: S = sandlib('generic')
            sage: S.all_k_config(7)
            {1: 7, 2: 7, 3: 7, 4: 7, 5: 7}
        
---

.. _all_k_div(k):

**all_k_div(k)**

	The divisor with all values set to k.

	INPUT:

	``k`` - integer

	OUTPUT:

	Divisor

	EXAMPLES::

	    sage: S = sandlib('generic')
            sage: S.all_k_div(7)
            {0: 7, 1: 7, 2: 7, 3: 7, 4: 7, 5: 7}
	
---

.. _betti(verbose):

**betti(verbose)**

        Computes the Betti table for the homogeneous sandpile ideal.  If
        ``verbose`` is ``True``, it prints the standard Betti table, otherwise,
        it returns a less formated table.

        INPUT:

	``verbose`` (optional) - boolean

        OUTPUT:

	Betti numbers for the sandpile


	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.betti()
		       0     1     2     3     4     5
	    ------------------------------------------
		0:     1     1     -     -     -     -
		1:     -     4     6     2     -     -
		2:     -     2     7     7     2     -
		3:     -     -     6    16    14     4
	    ------------------------------------------
	    total:     1     7    19    25    16     4
        
---

.. _betti_complexes():

**betti_complexes()**

	Returns a list of all the divisors with nonempty linear systems whose
	corresponding simplicial complexes have nonzero homology in some
	dimension. Each such divisors is returned with its corresponding
	simplicial complex.

        INPUT:

        None

        OUTPUT:

        list (of pairs [divisors, corresponding simplicial complex])


        EXAMPLES::

	    sage: S = Sandpile({0:{},1:{0: 1, 2: 1, 3: 4},2:{3: 5},3:{1: 1, 2: 1}},0)
	    sage: p = S.betti_complexes()
	    sage: p[0]
	    [{0: -8, 1: 5, 2: 4, 3: 1},
	     Simplicial complex with vertex set (0, 1, 2, 3) and facets {(1, 2), (3,)}]
	    sage: S.resolution()
	    'R <-- R^5 <-- R^5 <-- R^1'
	    sage: S.betti()
		       0     1     2     3
	    ------------------------------
		0:     1     -     -     -
		1:     -     5     5     -
		2:     -     -     -     1
	    ------------------------------
	    total:     1     5     5     1
	    sage: len(p)
	    11
            sage: p[0][1].homology()
            {0: Z, 1: 0}
            sage: p[-1][1].homology()
            {0: 0, 1: 0, 2: Z}
        
---

.. _burning_config():

**burning_config()**

        A minimal burning configuration.

	INPUT:

	None

	OUTPUT:

	dict (configuration)

	EXAMPLES::

	    sage: g = {0:{},1:{0:1,3:1,4:1},2:{0:1,3:1,5:1}, 
		       3:{2:1,5:1},4:{1:1,3:1},5:{2:1,3:1}}
	    sage: S = Sandpile(g,0)
	    sage: S.burning_config()
	    {1: 2, 2: 0, 3: 1, 4: 1, 5: 0}
	    sage: S.burning_config().values()
	    [2, 0, 1, 1, 0]
	    sage: S.burning_script()
	    {1: 1, 2: 3, 3: 5, 4: 1, 5: 4}
	    sage: script = S.burning_script().values()
            sage: script
	    [1, 3, 5, 1, 4]
	    sage: matrix(script)*S.reduced_laplacian()
	    [2 0 1 1 0]

	NOTES:

        The burning configuration and script are computed using a modified
	version of Speer's script algorithm.  This is a generalization to
	directed multigraphs of Dhar's burning algorithm.

	A *burning configuration* is a nonnegative integer-linear
	combination of the rows of the reduced Laplacian matrix having
	nonnegative entries and such that every vertex has a path from some
	vertex in its support.  The corresponding *burning script* gives
	the integer-linear combination needed to obtain the burning
	configuration.  So if `b` is the burning configuration, `sigma` is its
	script, and `tilde{L}` is the reduced Laplacian, then `sigma *
	tilde{L} = b`.  The *minimal burning configuration* is the one
	with the minimal script (its components are no larger than the
	components of any other script
	for a burning configuration).

	The following are equivalent for a configuration `c` with burning
	configuration `b` having script `sigma`:

	 - `c` is recurrent;
	 - `c+b` stabilizes to `c`;
	 - the firing vector for the stabilization of `c+b` is `sigma`.
	
---

.. _burning_script():

**burning_script()**

        A script for the minimal burning configuration.

	INPUT:

	None

	OUTPUT:

	dict

	EXAMPLES::

	    sage: g = {0:{},1:{0:1,3:1,4:1},2:{0:1,3:1,5:1},
		       3:{2:1,5:1},4:{1:1,3:1},5:{2:1,3:1}}
	    sage: S = Sandpile(g,0)
	    sage: S.burning_config()
	    {1: 2, 2: 0, 3: 1, 4: 1, 5: 0}
	    sage: S.burning_config().values()
	    [2, 0, 1, 1, 0]
	    sage: S.burning_script()
	    {1: 1, 2: 3, 3: 5, 4: 1, 5: 4}
	    sage: script = S.burning_script().values()
            sage: script
	    [1, 3, 5, 1, 4]
	    sage: matrix(script)*S.reduced_laplacian()
	    [2 0 1 1 0]

	NOTES:

	The burning configuration and script are computed using a modified
	version of Speer's script algorithm.  This is a generalization to
	directed multigraphs of Dhar's burning algorithm.

	A *burning configuration* is a nonnegative integer-linear
	combination of the rows of the reduced Laplacian matrix having
	nonnegative entries and such that every vertex has a path from some
	vertex in its support.  The corresponding *burning script* gives the
	integer-linear combination needed to obtain the burning configuration.
	So if `b` is the burning configuration, `s` is its script, and
	`L_{mathrm{red}}` is the reduced Laplacian, then `s *
	L_{mathrm{red}}= b`.  The *minimal burning configuration* is the one
	with the minimal script (its components are no larger than the
	components of any other script
	for a burning configuration).

	The following are equivalent for a configuration `c` with burning
	configuration `b` having script `s`:

	 - `c` is recurrent;
	 - `c+b` stabilizes to `c`;
	 - the firing vector for the stabilization of `c+b` is `s`.
	
---

.. _canonical_divisor():

**canonical_divisor()**

        Returns the canonical divisor: the divisor ``deg(v)-2`` grains of sand
        on each vertex.  Only for undirected graphs.

        INPUT:

        None

        OUTPUT:

        Divisor

        EXAMPLES::

            sage: S = complete_sandpile(4)
            sage: S.canonical_divisor()
            {0: 1, 1: 1, 2: 1, 3: 1}
        
---

.. _dict():

**dict()**

        Returns a dictionary of dictionaries representing a directed graph.

        INPUT:

	None

        OUTPUT:

	dict


	EXAMPLES::

            sage: G = sandlib('generic')
            sage: G.dict()
	    {0: {},
	     1: {0: 1, 3: 1, 4: 1},
	     2: {0: 1, 3: 1, 5: 1},
	     3: {2: 1, 5: 1},
	     4: {1: 1, 3: 1},
	     5: {2: 1, 3: 1}}
	    sage: G.sink()
	    0
        
---

.. _elementary_divisors():

**elementary_divisors()**

        The elementary divisors of the sandpile group (a finite
        abelian group).

	INPUT:

	None

	OUTPUT:

	list of integers

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.elementary_divisors()
	    [1, 1, 1, 1, 15]
        
---

.. _groebner():

**groebner()**

        Returns a Groebner basis for the homogeneous sandpile ideal with
        respect to the standard sandpile ordering (see ``ring``).

        INPUT:

	None

	OUTPUT:

	Groebner basis

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.groebner()
	    x_2-x_0,
	    x_3^2-x_5*x_0,
	    x_5*x_3-x_0^2,
	    x_4^2-x_3*x_1,
	    x_5^2-x_3*x_0,
	    x_1^3-x_4*x_3*x_0,
	    x_4*x_1^2-x_5*x_0^2
        
---

.. _group_order():

**group_order()**

	Returns the size of the sandpile group.

        INPUT:

	None

	OUTPUT:

	int

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.group_order()
	    15
        
---

.. _h_vector():

**h_vector()**

        Returns the first differences of the Hilbert function of the homogeneous
        sandpile ideal.  It lists the number of superstable configurations in
        each degree.

        INPUT:

	None

	OUTPUT:

	list of nonnegative integers


	EXAMPLES::

	    sage: S = sandlib('generic')
            sage: S.hilbert_function()
            [1, 5, 11, 15]
	    sage: S.h_vector()
	    [1, 4, 6, 4]
        
---

.. _hilbert_function():

**hilbert_function()**

        Returns the Hilbert function of the homogeneous sandpile ideal.

        INPUT:

	None

	OUTPUT:

	list of nonnegative integers

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.hilbert_function()
	    [1, 5, 11, 15]
        
---

.. _ideal():

**ideal()**

        The saturated, homogeneous sandpile ideal.

        INPUT:

	None

	OUTPUT:

	ideal

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.ideal()
	    x_2-x_0,
	    x_3^2-x_5*x_0,
	    x_5*x_3-x_0^2,
	    x_4^2-x_3*x_1,
	    x_5^2-x_3*x_0,
	    x_1^3-x_4*x_3*x_0,
	    x_4*x_1^2-x_5*x_0^2
        
---

.. _identity():

**identity()**

        Returns the identity configuration.

        INPUT:

	None

        OUTPUT:

	dict (the identity configuration)

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: e = S.identity()
	    sage: x = e & S.max_stable()  # stable addition
	    sage: x
            {1: 2, 2: 2, 3: 1, 4: 1, 5: 1}
            sage: x == S.max_stable()
            True
        
---

.. _in_degree(v):

**in_degree(v)**


        Return the in-degree of a vertex or a list of all in-degrees.

	INPUT:

	``v`` - vertex name or None

	OUTPUT:

	integer or dict

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.in_degree(2)
	    2
	    sage: S.in_degree()
	    {0: 2, 1: 1, 2: 2, 3: 4, 4: 1, 5: 2}
	
---

.. _is_undirected():

**is_undirected()**

        Returns ``True`` if ``(u,v)`` is and edge if and only if ``(v,u)`` is an
        edges, each edge with the same weight.

        INPUT:

        None

        OUTPUT:

        boolean

        EXAMPLES::

            sage: complete_sandpile(4).is_undirected()
            True
            sage: sandlib('gor').is_undirected()
            False
        
---

.. _laplacian():

**laplacian()**

        Returns the Laplacian matrix of the graph.

        INPUT:

	None

        OUTPUT:

	matrix


	EXAMPLES::

	    sage: G = sandlib('generic')
	    sage: G.laplacian()
	    [ 0  0  0  0  0  0]
	    [-1  3  0 -1 -1  0]
	    [-1  0  3 -1  0 -1]
	    [ 0  0 -1  2  0 -1]
	    [ 0 -1  0 -1  2  0]
	    [ 0  0 -1 -1  0  2]
        
---

.. _max_stable():

**max_stable()**

        Returns the maximal stable configuration.

        INPUT:

	None

	OUTPUT:

	Config (the maximal stable configuration)


	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.max_stable()
	    {1: 2, 2: 2, 3: 1, 4: 1, 5: 1}
        
---

.. _max_stable_div():

**max_stable_div()**

        Returns the maximal stable divisor.

        INPUT:

	Divisor

	OUTPUT:

	Divisor (the maximal stable divisor)


	EXAMPLES::

            sage: S = sandlib('generic')
            sage: S.max_stable_div()
            {0: -1, 1: 2, 2: 2, 3: 1, 4: 1, 5: 1}
            sage: S.out_degree()
            {0: 0, 1: 3, 2: 3, 3: 2, 4: 2, 5: 2}
        
---

.. _max_superstables():

**max_superstables()**


        EXAMPLES:

            sage: S=sandlib('riemann-roch2')
            sage: S.max_superstables()
            [{1: 1, 2: 1, 3: 1}, {1: 0, 2: 0, 3: 2}]
            sage: [i.values() for i in S.superstables()]
            [[0, 0, 0],
             [1, 0, 1],
             [1, 0, 0],
             [0, 1, 1],
             [0, 1, 0],
             [1, 1, 0],
             [0, 0, 1],
             [1, 1, 1],
             [0, 0, 2]]
            sage: S.h_vector()
            [1, 3, 4, 1]
        
---

.. _min_recurrents():

**min_recurrents()**

        Returns the minimal recurrent elements.  If the underlying graph is
        undirected, these are the recurrent elements of least degree.

        INPUT:

        None

        OUTPUT:

        list of Config

        EXAMPLES::

            sage: S=sandlib('riemann-roch2')
            sage: S.min_recurrents()
            [{1: 0, 2: 0, 3: 1}, {1: 1, 2: 1, 3: 0}]
            sage: [i.values() for i in S.recurrents()]
            [[1, 1, 2],
             [0, 1, 1],
             [0, 1, 2],
             [1, 0, 1],
             [1, 0, 2],
             [0, 0, 2],
             [1, 1, 1],
             [0, 0, 1],
             [1, 1, 0]]
            sage: [i.deg() for i in S.recurrents()]
            [4, 2, 3, 2, 3, 2, 3, 1, 2]
        
---

.. _nonsink_vertices():

**nonsink_vertices()**

	The names of the nonsink vertices.

	INPUT:

	None

	OUTPUT:

	None

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.nonsink_vertices()
	    [1, 2, 3, 4, 5]
	
---

.. _nonspecial_divisors():

**nonspecial_divisors()**

        Returns the nonspecial divisors: those divisors of degree ``g-1`` with
        empty linear system.  The term is only defined for undirected graphs.
        Here, ``g = |E| - |V| + 1`` is the genus of the graph.

        INPUT:

        OUTPUT:

        EXAMPLES::

            sage: S = complete_sandpile(4)
            sage: ns = S.nonspecial_divisors()
            sage: D = ns[0]
            sage: D.values()
            [-1, 1, 0, 2]
            sage: D.deg()
            2
            sage: [i.effective_div() for i in ns]
            [[], [], [], [], [], []]
        
---

.. _num_edges():

**num_edges()**

        Returns the number of edges.
        
        EXAMPLES::
        
            sage: G = graphs.PetersenGraph()
            sage: G.size()
            15
        
---

.. _out_degree(v):

**out_degree(v)**

        Return the out-degree of a vertex or a list of all out-degrees.

	INPUT:

	``v`` (optional) - vertex name

	OUTPUT:

	integer or dict

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.out_degree(2)
	    3
	    sage: S.out_degree()
	    {0: 0, 1: 3, 2: 3, 3: 2, 4: 2, 5: 2}
	
---

.. _points():

**points()**

	Returns generators for the multiplicative group of zeros of the sandpile
	ideal.

        INPUT:

	None

	OUTPUT:

	list of complex numbers

	EXAMPLES:

	The sandpile group in this example is cyclic, and hence there is a
	single generator for the group of solutions.

        ::

	    sage: S = sandlib('generic')
	    sage: S.points()
	    [[e^(4/5*I*pi), 1, e^(2/3*I*pi), e^(-34/15*I*pi), e^(-2/3*I*pi)]]
        
---

.. _postulation():

**postulation()**

	Returns the postulation number of the sandpile ideal.  This is the
	largest weight of a superstable configuration of the graph.

        INPUT:

	None

	OUTPUT:

	nonnegative integer

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.postulation()
	    3
        
---

.. _recurrents(verbose):

**recurrents(verbose)**

	Returns the list of recurrent configurations. If ``verbose``
        is ``False``, the configurations are converted to lists of
        integers.

        INPUT:

	``verbose`` (optional) - boolean

        OUTPUT:

	list (of recurrent configurations)


	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.recurrents()
	    [{1: 2, 2: 2, 4: 1, 4: 1, 5: 1},
	     {1: 2, 2: 2, 3: 0, 4: 1, 5: 1},
	     {1: 0, 2: 2, 3: 1, 4: 1, 5: 0},
	     {1: 0, 2: 2, 3: 1, 4: 1, 5: 1},
	     {1: 1, 2: 2, 3: 1, 4: 1, 5: 1},
	     {1: 1, 2: 2, 3: 0, 4: 1, 5: 1},
	     {1: 2, 2: 2, 3: 1, 4: 0, 5: 1},
	     {1: 2, 2: 2, 3: 0, 4: 0, 5: 1},
	     {1: 2, 2: 2, 3: 1, 4: 0, 5: 0},
	     {1: 1, 2: 2, 3: 1, 4: 1, 5: 0},
	     {1: 1, 2: 2, 3: 1, 4: 0, 5: 0},
	     {1: 1, 2: 2, 3: 1, 4: 0, 5: 1},
	     {1: 0, 2: 2, 3: 0, 4: 1, 5: 1},
	     {1: 2, 2: 2, 3: 1, 4: 1, 5: 0},
	     {1: 1, 2: 2, 3: 0, 4: 0, 5: 1}]
	    sage: S.recurrents(false)
	    [[2, 2, 1, 1, 1],
	     [2, 2, 0, 1, 1],
	     [0, 2, 1, 1, 0],
	     [0, 2, 1, 1, 1],
	     [1, 2, 1, 1, 1],
	     [1, 2, 0, 1, 1],
	     [2, 2, 1, 0, 1],
	     [2, 2, 0, 0, 1],
	     [2, 2, 1, 0, 0],
	     [1, 2, 1, 1, 0],
	     [1, 2, 1, 0, 0],
	     [1, 2, 1, 0, 1],
	     [0, 2, 0, 1, 1],
	     [2, 2, 1, 1, 0],
	     [1, 2, 0, 0, 1]]
        
---

.. _reduced_laplacian():

**reduced_laplacian()**

	Returns the reduced Laplacian matrix of the graph.

        INPUT:

	None

	OUTPUT:

	matrix


	EXAMPLES::

	    sage: G = sandlib('generic')
	    sage: G.laplacian()
	    [ 0  0  0  0  0  0]
	    [-1  3  0 -1 -1  0]
	    [-1  0  3 -1  0 -1]
	    [ 0  0 -1  2  0 -1]
	    [ 0 -1  0 -1  2  0]
	    [ 0  0 -1 -1  0  2]
	    sage: G.reduced_laplacian()
	    [ 3  0 -1 -1  0]
	    [ 0  3 -1  0 -1]
	    [ 0 -1  2  0 -1]
	    [-1  0 -1  2  0]
	    [ 0 -1 -1  0  2]

	NOTES:

	This is the Laplacian matrix with the row and column indexed by the
	sink vertex removed.
        
---

.. _reorder_vertices():

**reorder_vertices()**

        Create a copy of the sandpile but with the vertices ordered according
        to their distance from the sink, from greatest to least.

        INPUT:

	None

	OUTPUT:

	Sandpile

	EXAMPLES::
            sage: S.dict()
            {0: {},
             1: {0: 1, 3: 1, 4: 1},
             2: {0: 1, 3: 1, 5: 1},
             3: {2: 1, 5: 1},
             4: {1: 1, 3: 1},
             5: {2: 1, 3: 1}}
            sage: T = S.reorder_vertices()
            sage: T.dict()
            {0: {2: 1, 3: 1},
             1: {2: 1, 4: 1},
             2: {0: 1, 3: 1},
             3: {0: 1, 2: 1, 5: 1},
             4: {1: 1, 2: 1, 5: 1},
             5: {}}
        
---

.. _resolution(verbose):

**resolution(verbose)**

	This function computes a minimal free resolution of the homogeneous
	sandpile ideal.  If ``verbose`` is ``True``, then all of the mappings
	are returned.  Otherwise, the resolution is summarized.

        INPUT:

	``verbose`` (optional) - boolean

        OUTPUT:

	free resolution of the sandpile ideal

	EXAMPLES::

	    sage: S = Sandpile({0: {}, 1: {2: 2}, 2: {0: 4, 1: 1}}, 0)
	    sage: S.resolution()
	    'R <-- R^2 <-- R^1'
	    sage: S.resolution(verbose=True)
	    [1]:
	       _[1]=x_1^2-x_2^2
	       _[2]=x_1*x_2^3-x_0^4
	    [2]:
	       _[1]=x_1*x_2^3*gen(1)-x_0^4*gen(1)-x_1^2*gen(2)+x_2^2*gen(2)
	    [3]:
	       _[1]=0
        
---

.. _ring():

**ring()**

	The ring containing the homogeneous sandpile ideal.

        INPUT:

	None

	OUTPUT:

	ring

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.ring()
	    //   characteristic : 0
	    //   number of vars : 6
	    //        block   1 : ordering dp
	    //                  : names    x_5 x_4 x_3 x_2 x_1 x_0
	    //        block   2 : ordering C

	NOTES:

	The indeterminate `x_i` corresponds to the `i`-th vertex as listed my
	the method ``vertices``. The term-ordering is degrevlex with
	indeterminates ordered according to their distance from the sink (larger
	indeterminates are further from the sink).
        
---

.. _sink():

**sink()**

        Returns the identifier for the sink vertex.

        INPUT:

	None

        OUTPUT:

	Object (name for the sink vertex)

	EXAMPLES::

	    sage: G = sandlib('generic')
	    sage: G.sink()
	    0
	    sage: H = grid(2,2)
	    sage: H.sink()
	    'sink'
	    sage: type(H.sink())
	    <type 'str'>
        
---

.. _solve():

**solve()**

        Computes approximations of the complex affine zeros of the sandpile
        ideal.

        INPUT:

	None

	OUTPUT:

	list of complex numbers

	EXAMPLES::

	    sage: S = Sandpile({0: {}, 1: {2: 2}, 2: {0: 4, 1: 1}}, 0)
	    sage: S.solve()
	    [[0.707107*I - 0.707107, 0.707107 - 0.707107*I],
	     [-0.707107*I - 0.707107, 0.707107*I + 0.707107],
	     [-1*I, -1*I],
	     [I, I],
	     [0.707107*I + 0.707107, -0.707107*I - 0.707107],
	     [0.707107 - 0.707107*I, 0.707107*I - 0.707107],
	     [1, 1],
	     [-1, -1]]
	    sage: len(_)
	    8
	    sage: S.group_order()
	    8

	NOTES:

        The solutions form a multiplicative group isomorphic to the sandpile
	group.  Generators for this group are given exactly by ``points()``.
        
---

.. _superstables(verbose):

**superstables(verbose)**

	Returns the list of superstable configurations as dictionaries if
	``verbose`` is ``True``, otherwise as lists of integers.  The
	superstables are also known as `G`-parking functions.

        INPUT:

	``verbose`` (optional) - boolean

        OUTPUT:

	list (of superstable elements)


	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.superstables()
	    [{1: 0, 2: 0, 3: 0, 4: 0, 5: 0},
	     {1: 0, 2: 0, 3: 1, 4: 0, 5: 0},
	     {1: 2, 2: 0, 3: 0, 4: 0, 5: 1},
	     {1: 2, 2: 0, 3: 0, 4: 0, 5: 0},
	     {1: 1, 2: 0, 3: 0, 4: 0, 5: 0},
	     {1: 1, 2: 0, 3: 1, 4: 0, 5: 0},
	     {1: 0, 2: 0, 3: 0, 4: 1, 5: 0},
	     {1: 0, 2: 0, 3: 1, 4: 1, 5: 0},
	     {1: 0, 2: 0, 3: 0, 4: 1, 5: 1},
	     {1: 1, 2: 0, 3: 0, 4: 0, 5: 1},
	     {1: 1, 2: 0, 3: 0, 4: 1, 5: 1},
	     {1: 1, 2: 0, 3: 0, 4: 1, 5: 0},
	     {1: 2, 2: 0, 3: 1, 4: 0, 5: 0},
	     {1: 0, 2: 0, 3: 0, 4: 0, 5: 1},
	     {1: 1, 2: 0, 3: 1, 4: 1, 5: 0}]
	    sage: S.superstables(false)
	    [[0, 0, 0, 0, 0],
	     [0, 0, 1, 0, 0],
	     [2, 0, 0, 0, 1],
	     [2, 0, 0, 0, 0],
	     [1, 0, 0, 0, 0],
	     [1, 0, 1, 0, 0],
	     [0, 0, 0, 1, 0],
	     [0, 0, 1, 1, 0],
	     [0, 0, 0, 1, 1],
	     [1, 0, 0, 0, 1],
	     [1, 0, 0, 1, 1],
	     [1, 0, 0, 1, 0],
	     [2, 0, 1, 0, 0],
	     [0, 0, 0, 0, 1],
	     [1, 0, 1, 1, 0]]
        
---

.. _symmetric_recurrents(orbits):

**symmetric_recurrents(orbits)**

        Returns the list of symmetric recurrent configurations.

	INPUT:

	``orbits`` - list of lists partitioning the vertices

	OUTPUT:

        list of recurrent configurations

	EXAMPLES::

	    sage: S = sandlib('kite')
	    sage: S.dict()
	    {0: {},
	     1: {0: 1, 2: 1, 3: 1},
	     2: {1: 1, 3: 1, 4: 1},
	     3: {1: 1, 2: 1, 4: 1},
	     4: {2: 1, 3: 1}}
	    sage: S.symmetric_recurrents([[1],[2,3],[4]])
	    [{1: 2, 2: 2, 3: 2, 4: 1}, {1: 2, 2: 2, 3: 2, 4: 0}]
	    sage: S.recurrents()
	    [{1: 2, 2: 2, 3: 2, 4: 1},
	     {1: 2, 2: 2, 3: 2, 4: 0},
	     {1: 2, 2: 1, 3: 2, 4: 0},
	     {1: 2, 2: 2, 3: 0, 4: 1},
	     {1: 2, 2: 0, 3: 2, 4: 1},
	     {1: 2, 2: 2, 3: 1, 4: 0},
	     {1: 2, 2: 1, 3: 2, 4: 1},
	     {1: 2, 2: 2, 3: 1, 4: 1}]

	NOTES:

	The user is responsible for ensuring that the list of orbits comes from
	a group of symmetries of the underlying graph.
        
---

.. _unsaturated_ideal():

**unsaturated_ideal()**

        The unsaturated, homogeneous sandpile ideal.

        INPUT:

	None

	OUTPUT:

	ideal

	EXAMPLES::

	    sage: S = sandlib('generic')
	    sage: S.unsaturated_ideal()
	    x_1^3-x_4*x_3*x_0,
	    x_2^3-x_5*x_3*x_0,
	    x_3^2-x_5*x_2,
	    x_4^2-x_3*x_1,
	    x_5^2-x_3*x_2
	    sage: S.ideal()
	    x_2-x_0,
	    x_3^2-x_5*x_0,
	    x_5*x_3-x_0^2,
	    x_4^2-x_3*x_1,
	    x_5^2-x_3*x_0,
	    x_1^3-x_4*x_3*x_0,
	    x_4*x_1^2-x_5*x_0^2
        
---

.. _version():

**version()**

        Returns the version number of Sage Sandpiles.

        INPUT:

	None

	OUTPUT:

	string


	EXAMPLES::

            sage: S = sandlib('generic')
            sage: S.version()
            Sage Sandpiles Version 2.0
        
---

.. _vertices(boundary_first):

**vertices(boundary_first)**

        Return a list of the vertices.
        
        INPUT:
        
        
        -  ``boundary_first`` - Return the boundary vertices
           first.
        
        
        EXAMPLES::
        
            sage: P = graphs.PetersenGraph()
            sage: P.vertices()
            [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        
        Note that the output of the vertices() function is always sorted.
        This is sub-optimal, speed-wise, but note the following
        optimizations::
        
            sage: timeit V = P.vertices()                     # not tested
            100000 loops, best of 3: 8.85 [micro]s per loop
            sage: timeit V = list(P.vertex_iterator())        # not tested
            100000 loops, best of 3: 5.74 [micro]s per loop
            sage: timeit V = list(P._nxg.adj.iterkeys())      # not tested
            100000 loops, best of 3: 3.45 [micro]s per loop
        
        In other words, if you want a fast vertex iterator, call the
        dictionary directly.
        
---

.. _zero_config():

**zero_config()**

	The all-zero configuration.

	INPUT:

	None

	OUTPUT:

	Config

	EXAMPLES::

	    sage: S = sandlib('generic')
            sage: S.zero_config()
            {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
	
---

.. _zero_div():

**zero_div()**

	The all-zero divisor.

	INPUT:

	None

	OUTPUT:

	Divisor

	EXAMPLES::

	    sage: S = sandlib('generic')
            sage: S.zero_div()
            {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
	